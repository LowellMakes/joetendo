#!/usr/bin/env python3

import json
import os
from pathlib import Path
import select
import signal
import subprocess
import sys
import time
from xml.etree import ElementTree

_HAVE_REQUESTS = False
try:
    import requests
    _HAVE_REQUESTS = True
except ModuleNotFoundError:
    pass

_HAVE_VDF = False
try:
    import vdf
    _HAVE_VDF = True
except ModuleNotFoundError:
    pass


def ex(*args):
    subprocess.run(args, check=True)


def mklink(source, dest):
    subprocess.run(
        ["ln", "-f", "-s", dest, source],
        check=True,
    )


def switch_keymap(active_link, keymap):
    mklink(active_link, keymap)
    try:
        ex("systemctl", "is-active", "--quiet", "keyd")
    except subprocess.CalledProcessError:
        print("keyd is not running! what happened???", file=sys.stderr)
        raise

    try:
        ex("keyd", "reload")
    except subprocess.CalledProcessError:
        print("keyd reload failed??? what happened???", file=sys.stderr)
        raise


def get_info(appID):
    ret = subprocess.run(
        ["steamcmd", "+app_info_print", appID, "+exit"],
        capture_output=True,
        check=True
    )

    output = ret.stdout.decode()

    index = output.find(f'"{appID}"')
    if index == -1:
        raise Exception("Could not identify the start of VDF metadata")

    output = output[index:]
    index = output.find("Unloading Steam API")
    if index != -1:
        output = output[:index]
    info = vdf.loads(output)

    return info[appID]


def get_images(appID, cachedir):
    libimg = os.path.join(cachedir, f"library_{appID}.jpg")
    if not os.path.exists(libimg):
        url = f"https://shared.cloudflare.steamstatic.com/store_item_assets/steam/apps/{appID}/library_600x900_2x.jpg"
        rsp = requests.get(url)
        if rsp.status_code == 200:
            with open(libimg, "wb") as outfile:
                outfile.write(rsp.content)

    bgimg = os.path.join(cachedir, f"bg_{appID}.jpg")
    if not os.path.exists(bgimg):
        url = f"https://shared.cloudflare.steamstatic.com/store_item_assets/steam/apps/{appID}/page_bg_raw.jpg"
        rsp = requests.get(url)
        if rsp.status_code == 200:
            with open(bgimg, "wb") as outfile:
                outfile.write(rsp.content)


def get_executable(info):
    for execinfo in info['config']['launch'].values():
        if execinfo.get('config', {}).get('oslist', '') == 'linux':
            executable = execinfo['executable']
            if executable.startswith("./"):
                executable = executable[2:]
            return executable

    for execinfo in info['config']['launch'].values():
        if execinfo.get('config', {}).get('oslist', None) in ('windows', None):
            return execinfo['executable']

    raise Exception("Couldn't find a suitable executable to run this game ...?")


def load_or_fetch_info(appID, cachedir):
    target = os.path.join(cachedir, f"{appID}.json")

    if os.path.exists(target):
        with open(target, "r") as infile:
            info = json.load(infile)
    else:
        info = get_info(appID)
        with open(target, "w") as outfile:
            json.dump(info, outfile, indent=2)

    get_images(appID, cachedir)

    return info


def xfconf_query(channel, prop, value=None):
    if value:
        subprocess.run([
            "xfconf-query",
            "--create",
            "--type", "string",
            "-c", channel,
            "-p", prop,
            "-s", value,
        ])
    else:
        subprocess.run([
            "xfconf-query",
            "-c", channel,
            "-p", prop,
            "-r",
        ])


def remove_splash():
    xfconf_query("xfce4-terminal", "/background-image-file")
    xfconf_query("xfce4-terminal", "/background-mode")
    xfconf_query("xfce4-terminal", "/background-image-style")


def do_configure_splash(img):
    xfconf_query("xfce4-terminal", "/font-name", "Monospace Bold 20")
    if img:
        xfconf_query("xfce4-terminal", "/background-image-file", img)
        xfconf_query("xfce4-terminal", "/background-mode", "TERMINAL_BACKGROUND_IMAGE")
        xfconf_query("xfce4-terminal", "/background-image-style", "TERMINAL_BACKGROUND_STYLE_SCALED")
    else:
        remove_splash()


def configure_splash(img):
    try:
        do_configure_splash(img)
    except FileNotFoundError:
        print("Warning: Could not change terminal background. Is xfconf-query installed?")


def launch_wait(appID, rootdir):
    subprocess.run("clear", shell=True)
    cachedir = os.path.join(rootdir, "cache/")
    os.makedirs(cachedir, exist_ok=True)

    info = load_or_fetch_info(appID, cachedir)
    executable = get_executable(info)

    img = None
    bgimg = os.path.join(cachedir, f"bg_{appID}.jpg")
    libimg = os.path.join(cachedir, f"library_{appID}.jpg")
    if os.path.exists(bgimg):
        img = bgimg
    elif os.path.exists(libimg):
        img = libimg
    configure_splash(img)

    print(f"Launching {info['common']['name']} ...")
    subprocess.run(["steam", f"steam://rungameid/{appID}"])
    print(f"Waiting for {executable} ...")

    pid = None
    for i in range(60):
        ret = subprocess.run(
            f"ps ax -o pid,comm | grep -i {executable}",
            shell=True,
            capture_output=True,
            check=False,
        )
        if ret.returncode:
            print(f"\r{60-i} ...", end='')
            time.sleep(1)
            continue

        pid = int(ret.stdout.decode().strip().split(" ")[0])

        print(f"OK! {pid=}")
        break
    else:
        raise Exception("Game didn't launch?")

    print("Game executable running! Please enjoy =^_^=")
    pidfd = os.pidfd_open(pid)

    def handler(sig, frame):
        print("SIGTERM received, forwarding to game ...")
        signal.pidfd_send_signal(pidfd, signal.SIGTERM)

    signal.signal(signal.SIGTERM, handler)
    select.select([pidfd], [], [])
    print("Game executable closed, returning you to the menu (｡･ω･｡)ﾉ♡")


def add_steam_system(config_path, steam_path):
    tree = ElementTree.parse(config_path)
    root = tree.getroot()

    if root.findall('system/name[.="steam"]'):
        return

    node = ElementTree.fromstring(f"""
    <system>
      <name>steam</name>
      <fullname>Steam</fullname>
      <path>{steam_path}</path>
      <extension>.sh</extension>
      <command>%ROM%</command>
      <platform>steam</platform>
      <theme>steam</theme>
    </system>
    """)

    root.append(node)
    ElementTree.indent(tree)
    tree.write(config_path)


def external_tool_setup():
    try:
        ex("which", "apt")
    except subprocess.CalledProcessError:
        print("This setup script is intended for apt-based systems only", file=sys.stderr)
        sys.exit(1)

    try:
        ex("which", "wget")
    except subprocess.CalledProcessError:
        ex("apt", "install", "-y", "wget")

    try:
        ex("which", "keyd")
    except subprocess.CalledProcessError:
        ex("wget", "https://api.github.com/repos/rvaiya/keyd/releases/latest", "-O", "keyd.json")
        with open("keyd.json", "rb") as infile:
            data = json.load(infile)
            url = data['tarball_url']
        ex("wget", url, "-O", "keyd-latest.tar.gz")
        os.mkdir("keyd-latest")
        ex("tar", "zxf", "keyd-latest.tar.gz", "-C", "keyd-latest", "--strip-components", "1")
        ex("make", "-C", "keyd-latest/")
        ex("make", "install", "-C", "keyd-latest/")

    ex("systemctl", "enable", "keyd")

    try:
        ex("which", "steam")
    except subprocess.CalledProcessError:
        ex("wget", "https://repo.steampowered.com/steam/archive/stable/steam_latest.deb")
        ex("dpkg", "-i", "steam_latest.deb")

    try:
        ex("which", "steamcmd")
    except subprocess.CalledProcessError:
        ex("add-apt-repository", "-y", "multiverse")
        ex("dpkg", "--add-architecture", "i386")
        ex("apt", "update", "-y")
        ex("apt", "install", "-y", "steamcmd")

    try:
        ex("which", "xfce4-terminal")
        ex("which", "xfconf-query")
    except subprocess.CalledProcessError:
        ex("apt", "install", "-y", "xfce4-terminal")

    if not _HAVE_REQUESTS:
        ex("apt", "install", "-y", "python3-requests")

    if not _HAVE_VDF:
        ex("apt", "install", "-y", "python3-vdf")


def first_run_setup(keymapdir):
    external_tool_setup()

    # Point /etc/keyd/default.conf to {active_link}
    # We do this so we have permission to change the active conf without root!
    active_link = os.path.join(keymapdir, "active.conf")
    mklink("/etc/keyd/default.conf", active_link)

    # Point active.conf to our (user-owned) default.conf
    default_map = os.path.join(keymapdir, "default.conf")
    mklink(active_link, default_map)

    rootdir = os.path.expanduser("~/RetroPie/steam/")
    add_steam_system("/etc/emulationstation/es_systems.cfg", os.path.join(rootdir, "menu"))

    # install the default keymapping config
    # install the 'vent' script into place
    # install the 'kiosk' script into place
    # replace the ES autoboot with kiosk/xfce4-terminal autoboot
    # add kiosk user to keyd group to be able to execute 'keyd reload'


def main():
    # /etc/keyd/default.conf is a symlink to {active_link}.
    # {rootdir}/keymaps/default.conf exists and is a suitable keymap when no steam game is running.
    # {rootdir}/keymaps/{appID}.conf, if it exists, should be a suitable keymap config for that game.

    user = os.environ.get("SUDO_USER")
    if not user:
        user = os.environ.get("USER")
    if not user:
        # todo: could use 'whoami' ...
        raise Exception("Failed to determine who is running this script. Who are you?")

    appID = sys.argv[1]

    home = Path(os.path.expanduser(f"~{user}"))
    rp_root = home.joinpath("RetroPie")
    steam_root = rp_root.joinpath("steam")
    keymap_dir = steam_root.joinpath("keymaps")
    active_link = keymap_dir.joinpath("active.conf")
    default_map = keymap_dir.joinpath("default.conf")
    keymap = keymap_dir.joinpath(f"{appID}.conf")

    os.makedirs(keymap_dir, exist_ok=True)

    try:
        switch_keymap(str(active_link), str(keymap))
        launch_wait(appID, str(steam_root))
    finally:
        switch_keymap(str(active_link), str(default_map))
        remove_splash()


if __name__ == '__main__':
    try:
        main()
    except BaseException as exc:
        print("Oof, something exploded.")
        print(f"{type(exc)}: {str(exc)}")
        print("Launcher will return to emulationstation in three minutes.")
        print("Please take a picture of the error messages and post it on the Arcade gaming basecamp,")
        print("Or mail it to gaming@lowellmakes.com. Thank you and sorry for the bugs!!")
        time.sleep(60)
        print("Two minutes left.")
        time.sleep(60)
        print("One minute left.")
        time.sleep(30)
        print("Thirty seconds ...")
        time.sleep(25)
        print("Five seconds!")
        time.sleep(5)
        print("Adios cowboy!")
        raise
